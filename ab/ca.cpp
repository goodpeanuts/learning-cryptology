/*
 * @Author: goodpeanuts goddpeanuts@foxmail.com
 * @Date: 2023-12-27 12:06:13
 * @LastEditors: goodpeanuts goddpeanuts@foxmail.com
 * @LastEditTime: 2023-12-27 15:18:28
 * @FilePath: /learning-cryptology/ab/ca.cpp
 * @Description: 数字签名和CA认证
 * 
 * Copyright (c) 2023 by goodpeanuts, All Rights Reserved. 
 */
#include <iostream>
#include <cassert>
#include <string>
#include <sstream>
#include "rsa.h"
#include "md5.h"

struct CA
{
    std::string name;
    std::string id;
    std::string e;
    std::string n;
    std::string hash;
};

std::ostream &operator<<(std::ostream &os, const CA &ca)
{
    os << "[Name:] " << ca.name << "\n"
       << "[ID:] " << ca.id << "\n"
       << "[E:] " << ca.e << "\n"
       << "[N:] " << ca.n << "\n"
       << "[Hash:] " << ca.hash;
    return os;
}

// 读取证书
void parseInput(const std::string &input, CA &ca)
{
    size_t pos1, pos2;

    pos1 = input.find("<name>") + 6;
    pos2 = input.find("</name>");
    ca.name = input.substr(pos1, pos2 - pos1);

    pos1 = input.find("<id>") + 4;
    pos2 = input.find("</id>");
    ca.id = input.substr(pos1, pos2 - pos1);

    pos1 = input.find("<e>") + 3;
    pos2 = input.find("</e>");
    ca.e = input.substr(pos1, pos2 - pos1);

    pos1 = input.find("<n>") + 3;
    pos2 = input.find("</n>");
    ca.n = input.substr(pos1, pos2 - pos1);

    pos1 = input.find("<hash>") + 6;
    pos2 = input.find("</hash>");
    ca.hash = input.substr(pos1, pos2 - pos1);
}

// 输出证书
std::string serializeOutput(const CA &ca)
{
    std::string output;

    output += "<name>" + ca.name + "</name>";
    output += "<id>" + ca.id + "</id>";
    output += "<e>" + ca.e + "</e>";
    output += "<n>" + ca.n + "</n>";
    output += "<hash>" + ca.hash + "</hash>";

    return output;
}

const std::string alice_d_str = "121305883625848036560778141668465183417312012603965510236219996196098547236552123473195427019155749376924332388013425839810235142470700828835241929797211376555497640638968730592314121729339006979563571216343548581091047868263177734285851152923732196344660114640557102987506719578398520268796847143543327007864545495356167659879848181747975288878326514557053319729277579435355172852081629161453031084898348815357202259377268589527535846836142179254157678543975018234188284532299646781012810910760200954451560367417903134375233586335088848479247160330791139303895811634072785669523859113763631048971238332462551840319212912961310893173718499386437731080275092938207118158874166681341568814272933231502646251812151007040691826678713222488659953900552736733158767221674299451833858903280574069074938772223601550756664665416003853290075838556967213420483260911554542930678534339784946858369815846258466611329116579641798341581159408317631919255350403546324763820229760425170662928834442646815011105509355831220670358913125592533687517318726117879760396637356663547849256178315959237658183760429644989941690965610704048475411449554694355644227186505633253261112353303720640934697994819045375861720316717788014784044110398037931474319064139";

const std::string bob_d_str = "389825748650402112134998776902132410583756908795024087245043139972646260814652967766179757895076724324424081908933719324919154409923680787019794127142845663790100570927209749852804608397958623395452952169718062102001696545990613220524183760279403876536863781906843189651452294462993098322137869373346135791091448839388316574504890237834041581893945918588079631728648275457986697040852588184736836642504611241090768420802545035238600480905724655482622424334110555423605804864582830596116980404501410937562352717408126311530533439228808772759197002211467039493127308998434626959947017724681616020520060415920226628755122652882473546780487130614676753627020633593753968285702644394044824964462378203844871726930362345321603050978034850474500806416129949564886007770370924795918777565288858625442883356775478699639526885200140642915200644477545201132310828772384876447734353091324631919532742491325384329582870476467670261397155965843344730475544353019635243976248058209043526254838295719296369854280595991011646450445420259065830297809196883680118510975487656614251893087536033739386752509345357240916292252008364627090718855213294454960957328525211782965794756090611820700899401134982007188441220621409380137164937884794665026664870849";

const std::string alice_e_str = "65731336703366883394095018210398053217130644366726341909208662832016529726099";

const std::string alice_n_str = "579522468003058243993239718950711828500800749483577015429778065585043322873845982071284241150570367240755757029946959066571184411169766879234411047738154614362624231684848620979103805672910179736584815175517516924302006013577345525960267375378910249948358897175136227037095486748949371319105108888443645487166106677051165039985747428048143395159785162003610378281176670853681513423438724167721882099664216826247372819935724637013384717211914648415523188145358488874264426730418904258325424425927206901995811469019304499772781738016264778391642320236296292511692819568519068440644315519902509583506918576434426698938066133050353875506811860489411748932283886586747829955004674421553589305482396067109198865928635151892115955919165180712917957001470653115500769693295449245503918383677533432638802567192742450022596394344588691736551043591478947915020898572918614992062853797658233981443990019780382205282819066445767247097462193827555395633596968943860424115713638084962527519600866309506161169879272466594965920660279975116978823523822413096445435487121033286857118016309144418414699423056420427297625960588727329613160040048426043050130108980369419504037944766627814048677372966151817913803208942937954209562410731831288541256408699";

const std::string bob_e_str = "50616591502514695730529966541452236326631445138831440578094714979124887591361";

const std::string bob_n_str = "456446233742196804212902752266936832852125394340798279785830696777179480012898061076033004654846661546245593708379992433074263257432636335739366726577985669049336812547790334948228576397426174978701974173957287621210016044094852679085416447649708027991410040232129273483468892847628220081565651823310497859002832507361485481989880199366386363504363147902551811484370121450778500501167927815594263611918068525564141710645769420199293850670889996303057366979873885242511692975203500434330746039278603161756814562276682343506640637258257443868009295125663629387955468252098947150839064916138940139984253473380017728811368220442955932459604311777195329660762485331104666004195402984068905436567813448775702782070146930987072297477472206067540983529781232571554416370513226436426433168797317163805162082651087959512465153650760490436129376316420216695146005204483052724844407563320859568784905134933660287567928142700713719851826229649532218750801223775446936103897839829361016565453088543897490597559573643098359678935057911435759855704510790434787499718161436442576809250279702081517348909828551456087751991781123899313625454587567988929658990956348935032934768191965775124634387122453446066264517044857966058886658227182869548828145081";

const std::string ca_e_str = "48230234972912824395842558097639002513568074476425538103268507341286887459231";
const std::string ca_d_str = "295391477299297227829841989650322647920510930089346096045849715541727759093296167061911051861164749310695327934113340033799791485575317611910947533482108262525556632018324919607025707607376782265922436414186602382731594630145340974884551240065186998730427094294204915192880556388449073517496413466221779029605548249117798743220628361964707630333648109713941921516247397016915895416916783125889394085226837282700923236491869987615584320651214827725526793804960796038908857928389909246084763108156956867592512543783482822086959517453050263552741858828215221393587150817782955325622610327893818757982942310528860683506078101039017050829254935867012786615534168225491609175796384105176515653564612728079258260379351828588733113707406625774297281049176109691125410733184205529885663418240548556605073787865493300486559482833985228488760645722304943985086817448848716825854703304745403766531728498715626032334582966181953207863604385223336515389350241516439787071107405172252733604023995313453145225259291236349384029867920275651387909137152418165637950915283144403464296464131860215915354094302568487763259256257767976037373649619292383959130313565962673074691468871802832487840607101279469675572341249906467445594820002076684011043750551";
const std::string ca_n_str = "619602684616718133248166089597571487511277402914611620850125903424668688104687670617378588775835487311063258626548554081827812655925357694818063993928526158345239445898782939091939534158590104237602533025009702708312473083110552254979005350786410296624529923063440890284652345112272600681355857616730143146815018336562190721398854580071921151308489054038089831835855652447214604080474324413176928326486156913321758465185674780798384482836956528975868405845522525584348905831801107722404011544272835142084995828581965045114648892493671003801328310152648415556547166218496006151999501918778575259950301418580325847216333782171847192858517438607670864898944012265229831003226596417986859654041555237089012297250957831824506518898039849667441035198614256630307837962864485936438192773058171655684737474296652245829932551480504038519905494148852150387567449487862996399079029669341374317456363373157341294071261687446233389489525278305797441376350202598176868140794246405466660433438702380961687906758250650466175257003880442503576664576169994242705332173013315618901593667359420965063396903165950548639725829800214737507511974963928624712688275462581538292339732451089219745284674444592936397213730800316583112799882291891921182659058507";

CA alice = {"Alice", "1234567890", alice_e_str, alice_n_str, ""};
CA bob = {"Bob", "0987654321", bob_e_str, bob_n_str, ""};

// 发放证书
void issueCertificate(CA &a)
{
    std::string toHash = a.name + a.id + a.e + a.n;
    std::cout << "[toHash:] " << toHash << std::endl;
    char *toHashCopy = new char[toHash.length() + 1];
    std::strcpy(toHashCopy, toHash.c_str());
    char *hashCStr = strMd5(toHashCopy);
    std::string hash(hashCStr);

    std::cout << "[证书Hash:] " << hash << std::endl;

    // 计算hash
    std::string hashStr = hash;
    CryptoPP::Integer d(ca_d_str.c_str());
    CryptoPP::Integer n(ca_n_str.c_str());
    CryptoPP::Integer hashInt = RSA::encode_string(hashStr);

    // 对hash签名
    CryptoPP::Integer signInt = a_exp_b_mod_c(hashInt, d, n);
    std::string signStr = RSA::decode_string(signInt);
    a.hash = signStr;

    delete[] toHashCopy;
}

// 验证证书
void verifyCertificate(const CA &a)
{
    std::string toHash = a.name + a.id + a.e + a.n;
    std::cout << "[toHash:] " << toHash << std::endl;
    char *toHashCopy = new char[toHash.length() + 1];
    std::strcpy(toHashCopy, toHash.c_str());
    char *hashCStr = strMd5(toHashCopy);
    std::string hash(hashCStr);

    std::cout << "[证书Hash:] " << hash << std::endl;

    // 验签
    CryptoPP::Integer e(ca_e_str.c_str());
    CryptoPP::Integer signInt = RSA::encode_string(a.hash);
    CryptoPP::Integer n(ca_n_str.c_str());
    CryptoPP::Integer hashInt = a_exp_b_mod_c(signInt, e, n);
    std::string desig = RSA::decode_string(hashInt);
    std::cout << "[解密Hash] " << desig << std::endl;

    if (desig == hash)
    {
        std::cout << std::endl;
        std::cout << "======= [验证成功] =======" << std::endl;
    }
    else
    {
        std::cout << std::endl;
        std::cout << "####### [验证失败] #######" << std::endl;
    }
    assert(desig == hash);
    delete[] toHashCopy;
}

int main()
{
    std::cout << "======== alice =========" << std::endl;
    std::cout << alice << std::endl;
    std::cout << "======== Alice(unsig) ========" << std::endl;
    std::cout << serializeOutput(alice) << std::endl;
    std::cout << "======== bob =========" << std::endl;
    std::cout << bob << std::endl;
    std::cout << "======== Bob(unsig) ========" << std::endl;
    std::cout << serializeOutput(bob) << std::endl;

    // 发放证书
    std::cout << std::endl;
    std::cout << "======== 发放证书(alice) ========" << std::endl;
    issueCertificate(alice);

    // 验证证书
    std::cout << std::endl;
    std::cout << "======== 验证证书(alice) ========" << std::endl;
    verifyCertificate(alice);

    // 发放证书
    std::cout << std::endl;
    std::cout << "======== 发放证书(bob) ========" << std::endl;
    issueCertificate(bob);

    // 验证证书
    std::cout << std::endl;
    std::cout << "======== 验证证书(bob) ========" << std::endl;
    verifyCertificate(bob);

    return 0;
}