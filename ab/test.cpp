#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h> // for close function
#include <iostream>
#include <fstream>
#include <string.h> // for memset
#include "rsa.h"
#include "md5.h"
#include "aes.h"
using namespace std;

// bob 的私钥
const std::string bob_d_str = "389825748650402112134998776902132410583756908795024087245043139972646260814652967766179757895076724324424081908933719324919154409923680787019794127142845663790100570927209749852804608397958623395452952169718062102001696545990613220524183760279403876536863781906843189651452294462993098322137869373346135791091448839388316574504890237834041581893945918588079631728648275457986697040852588184736836642504611241090768420802545035238600480905724655482622424334110555423605804864582830596116980404501410937562352717408126311530533439228808772759197002211467039493127308998434626959947017724681616020520060415920226628755122652882473546780487130614676753627020633593753968285702644394044824964462378203844871726930362345321603050978034850474500806416129949564886007770370924795918777565288858625442883356775478699639526885200140642915200644477545201132310828772384876447734353091324631919532742491325384329582870476467670261397155965843344730475544353019635243976248058209043526254838295719296369854280595991011646450445420259065830297809196883680118510975487656614251893087536033739386752509345357240916292252008364627090718855213294454960957328525211782965794756090611820700899401134982007188441220621409380137164937884794665026664870849";

const std::string bob_n_str = "456446233742196804212902752266936832852125394340798279785830696777179480012898061076033004654846661546245593708379992433074263257432636335739366726577985669049336812547790334948228576397426174978701974173957287621210016044094852679085416447649708027991410040232129273483468892847628220081565651823310497859002832507361485481989880199366386363504363147902551811484370121450778500501167927815594263611918068525564141710645769420199293850670889996303057366979873885242511692975203500434330746039278603161756814562276682343506640637258257443868009295125663629387955468252098947150839064916138940139984253473380017728811368220442955932459604311777195329660762485331104666004195402984068905436567813448775702782070146930987072297477472206067540983529781232571554416370513226436426433168797317163805162082651087959512465153650760490436129376316420216695146005204483052724844407563320859568784905134933660287567928142700713719851826229649532218750801223775446936103897839829361016565453088543897490597559573643098359678935057911435759855704510790434787499718161436442576809250279702081517348909828551456087751991781123899313625454587567988929658990956348935032934768191965775124634387122453446066264517044857966058886658227182869548828145081";

int main()
{
    CryptoPP::Integer bob_d(bob_d_str.c_str());
    CryptoPP::Integer bob_n(bob_n_str.c_str());
    cout << "\nbob_d: " << bob_d << endl;
    cout << "\n[d_str]" << bob_d_str << endl;
    cout << "\nbob_n: " << bob_n << endl;
    cout << "\n[n_str]" << bob_n_str << endl;
}